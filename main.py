import telebot
from connections import bot_token
from markups import start_markup, quantity_markup, address_markup, profile_markup , grn_markup , usd_markup , sure_markup

user_data = {}
form_status = None
currency_status = None

bot = telebot.TeleBot(bot_token)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Çüëã –û–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É , —è–∫—É —Ö–æ—á–µ—à –∫—É–ø–∏—Ç–∏ –∞–±–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å", reply_markup=start_markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    global form_status , chosen_coin
    chat_id = call.message.chat.id

    if call.data == 'back':
        if form_status == 'quantity':
            bot.send_message(chat_id, "–û–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—à –∫—É–ø–∏—Ç–∏ –∞–±–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Åü§ù", reply_markup=start_markup)
            form_status = None
        elif form_status == 'address':
            chosen_coin = user_data[chat_id]['coin']
            bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ {chosen_coin}. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å üî¢", reply_markup=quantity_markup)
            form_status = 'quantity'
        elif form_status == 'profile':
            bot.send_message(chat_id, "–û–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—à –∫—É–ø–∏—Ç–∏ –∞–±–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Åü§ù", reply_markup=start_markup)
            form_status = None
        elif 'markup' in form_status:  # assuming the status contains "markup"
            bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ {chosen_coin}. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å üî¢", reply_markup=quantity_markup)
            form_status = 'quantity'
    elif call.data in ['BNB', 'TRX', 'MATIC', 'SOL', 'ETH', 'SUI', 'APTOS']:
        bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ {call.data}. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å üî¢", reply_markup=quantity_markup)
        user_data[chat_id] = {'coin': call.data, 'status': 'filling'}
        form_status = "quantity"
    elif call.data in ['grn', 'usd']:
        chosen_coin = user_data[chat_id]['coin']  # Retrieve the chosen coin from user_data
        if call.data == 'grn':
            bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ –≥—Ä–∏–≤–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –≤–∞–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤ –≥—Ä–∏–≤–Ω—è—Ö", reply_markup=quantity_markup)
        elif call.data == 'usd':
            bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ –¥–æ–ª–∞—Ä–∏. –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –≤–∞–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤ –¥–æ–ª–∞—Ä–∞—Ö", reply_markup=quantity_markup)
        user_data[chat_id] = {'coin': chosen_coin, 'status': 'filling'}
        form_status = "markup"  # Change form_status to 'markup'
    elif call.data in ['profile']:
        bot.send_message(chat_id, "–ü–µ—Ä–µ–≥–ª—è–Ω—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—éü§ù", reply_markup=profile_markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and form_status == "quantity")
def handle_quantity(message):
    global form_status
    chat_id = message.chat.id
    text = message.text.lower()
    chosen_coin = user_data[chat_id]['coin']

    if text == 'back':
        bot.send_message(chat_id, f"–û–±—Ä–∞–Ω–æ {chosen_coin}. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å üî¢", reply_markup=quantity_markup)
        form_status = 'quantity'
    else:
        quantity = message.text
        user_data[chat_id]['quantity'] = quantity
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è {chosen_coin} üíå", reply_markup=address_markup)
        form_status = "address"

@bot.message_handler(func=lambda message: message.chat.id in user_data and form_status == 'address')
def handle_address(message):
    global form_status
    chat_id = message.chat.id
    address = message.text
    user_data[chat_id]['address'] = address
    user_data[chat_id]['status'] = 'complete'
    bot.send_message(chat_id, "‚óæÔ∏è –Ø –≤–ø–µ–≤–Ω–µ–Ω–∏–π –≤ –ø–æ–∫—É–ø—Ü—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.                                         ‚óæÔ∏è –Ø –æ–ø–ª–∞—á—É—é –∑ —Å–≤–æ—î—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∏.", reply_markup=sure_markup)
    form_status = "sure"


# RUN
bot.infinity_polling()