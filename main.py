import telebot
from connections import bot_token
from markups import  start_markup

bot = telebot.TeleBot(bot_token)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Çüëã –û–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É , —è–∫—É —Ö–æ—á–µ—à –∫—É–ø–∏—Ç–∏ –∞–±–æ –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å",reply_markup=start_markup)

"""@bot.message_handler(func=lambda message: chat_states.get(message.chat.id) == 'current_pass')
def check_current_password(message):
    user_password = redis_client.get(f"user_password:{message.chat.id}")
    if user_password == message.text:
        chat_states[message.chat.id] = 'new_password'
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –∫–æ–¥, —è–∫–∏–π —Ç–∏ –±—É–¥–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–≤–æ—ó—Ö –ø–∞—Ä–æ–ª–µ–π. –ó–∞–ø–∞–º'—è—Ç–∞–π —á–∏ –∑–∞–ø–∏—à–∏ –π–æ–≥–æüõë")
        redis_client.set(f"temp_user_password:{message.chat.id}", "True")
    else:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: chat_states.get(message.chat.id) == 'new_password')
def set_new_password(message):
    redis_client.set(f"user_password:{message.chat.id}", message.text)
    chat_states[message.chat.id] = None
    bot.reply_to(
        message, "–î—è–∫—É—é, —Ç–≤—ñ–π –Ω–æ–≤–∏–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–≤–æ—ó—Ö –ø–∞—Ä–æ–ª–µ–π —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π! –¢–µ–ø–µ—Ä –≤–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é", reply_markup=menu_markup)
    bot.delete_message(message.chat.id, message.message_id)

@bot.message_handler(func=lambda message: chat_states.get(message.chat.id) == 'my_password')
def my_checker(message):
    my_check_password(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "bot_pass":
        bot.send_message(
            call.message.chat.id, "–í–≤–µ–¥–∏ –∫–æ–¥, —è–∫–∏–π —Ç–∏ –±—É–¥–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–≤–æ—ó—Ö –ø–∞—Ä–æ–ª–µ–π. –ó–∞–ø–∞–º'—è—Ç–∞–π —á–∏ –∑–∞–ø–∏—à–∏ –π–æ–≥–æüõë")
        chat_states[call.message.chat.id] = 'password_required'
        redis_client.set(f"temp_user_password:{call.message.chat.id}", "True")
    elif call.data == "new_pass":
        bot.send_message(
            call.message.chat.id, "–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É")
        chat_states[call.message.chat.id] = 'current_pass'
    elif call.data == "gen_pass":
        bot.send_message(call.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å "
                                        "–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–¥—ñ–π–Ω–∏—Ö –ø–∞—Ä–æ–ª–µ–πüîë" , reply_markup=gen_markup)
    elif call.data in ["letters", "digits", "symbols"]:
        chat_id = call.message.chat.id
        if 'gen_markup_selections' not in chat_states:
            chat_states['gen_markup_selections'] = []
        chat_states['gen_markup_selections'].append(call.data)
    elif call.data == "generate_password":
        chat_id = call.message.chat.id
        if 'gen_markup_selections' in chat_states:
            selected_items = chat_states['gen_markup_selections']
            generated_passwords = generate_passwords(selected_items)
            password_text = "\n".join(generated_passwords)
            last_generated_password = password_text
            chat_states['last_generated_password'] = last_generated_password
            bot.send_message(
                chat_id, f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å:\n  \n{password_text}",reply_markup=copy_markup)
    elif call.data == "main_menu":
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é",reply_markup=menu_markup)
        if 'gen_markup_selections' in chat_states:
            chat_states['gen_markup_selections'] = []
    elif call.data == "my_pass":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É")
        chat_states[call.message.chat.id] = 'my_password'
    elif call.data == "save_pass":
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–í–≤–µ–¥–∏ –ª–æ–≥—ñ–Ω –¥–æ –ø–∞—Ä–æ–ª—é, —è–∫–∏–π —Ç–∏ —Ö–æ—á–µ—à –∑–±–µ—Ä–µ–≥—Ç–∏üë§")
        chat_states[chat_id] = {"state": "save_login", "login": None, "password": None}


@bot.message_handler(func=lambda message: chat_states.get(message.chat.id, {}).get("state") == "save_login")
def save_login(message):
    chat_id = message.chat.id
    chat_state = chat_states.get(chat_id, {})
    chat_state["login"] = message.text
    chat_state["state"] = "save_password"
    chat_states[chat_id] = chat_state
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, —è–∫–∏–π —Ö–æ—á–µ—à –∑–±–µ—Ä–µ–≥—Ç–∏ üîê")


@bot.message_handler(func=lambda message: chat_states.get(message.chat.id, {}).get("state") == "save_password")
def save_password(message):
    chat_id = message.chat.id
    chat_state = chat_states.get(chat_id, {})
    chat_state["password"] = message.text

    login = chat_state["login"]
    password = chat_state["password"]

    save_to_database(chat_id, login, password)


    chat_state["state"] = None
    chat_state["login"] = None
    chat_state["password"] = None
    chat_states[chat_id] = chat_state

    bot.send_message(
        chat_id, "–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=menu_markup)

def save_to_database(user_id, login, password):
    data = {"user_id": user_id, "login": login, "password": password}
    collection.insert_one(data)

@bot.message_handler(func=lambda message: True)
def saver(message):
    save_password(message)"""
        
# RUN
bot.infinity_polling()